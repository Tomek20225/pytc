use super::reader::Reader;

#[derive(Debug)]
pub enum Operation {
    PopTop(u8),
    RotTwo(u8),
    RotThree(u8),
    DupTop(u8),
    DupTopTwo(u8),
    RotFour(u8),
    Nop(u8),
    UnaryPositive(u8),
    UnaryNegative(u8),
    UnaryNot(u8),
    UnaryInvert(u8),
    BinaryMatrixMultiply(u8),
    InplaceMatrixMultiply(u8),
    BinaryPower(u8),
    BinaryMultiply(u8),
    BinaryModulo(u8),
    BinaryAdd(u8),
    BinarySubtract(u8),
    BinarySubscr(u8),
    BinaryFloorDivide(u8),
    BinaryTrueDivide(u8),
    InplaceFloorDivide(u8),
    InplaceTrueDivide(u8),
    GetLen(u8),
    MatchMapping(u8),
    MatchSequence(u8),
    MatchKeys(u8),
    CopyDictWithoutKeys(u8),
    WithExceptStart(u8),
    GetAiter(u8),
    GetAnext(u8),
    BeforeAsyncWith(u8),
    EndAsyncFor(u8),
    InplaceAdd(u8),
    InplaceSubtract(u8),
    InplaceMultiply(u8),
    InplaceModulo(u8),
    StoreSubscr(u8),
    DeleteSubscr(u8),
    BinaryLshift(u8),
    BinaryRshift(u8),
    BinaryAnd(u8),
    BinaryXor(u8),
    BinaryOr(u8),
    InplacePower(u8),
    GetIter(u8),
    GetYieldFromIter(u8),
    PrintExpr(u8),
    LoadBuildClass(u8),
    YieldFrom(u8),
    GetAwaitable(u8),
    LoadAssertionError(u8),
    InplaceLshift(u8),
    InplaceRshift(u8),
    InplaceAnd(u8),
    InplaceXor(u8),
    InplaceOr(u8),
    ListToTuple(u8),
    ReturnValue(u8),
    ImportStar(u8),
    SetupAnnotations(u8),
    YieldValue(u8),
    PopBlock(u8),
    PopExcept(u8),
    StoreName(u8),
    DeleteName(u8),
    UnpackSequence(u8),
    ForIter(u8),
    UnpackEx(u8),
    StoreAttr(u8),
    DeleteAttr(u8),
    StoreGlobal(u8),
    DeleteGlobal(u8),
    RotN(u8),
    LoadConst(u8),
    LoadName(u8),
    BuildTuple(u8),
    BuildList(u8),
    BuildSet(u8),
    BuildMap(u8),
    LoadAttr(u8),
    CompareOp(u8),
    ImportName(u8),
    ImportFrom(u8),
    JumpForward(u8),
    JumpIfFalseOrPop(u8),
    JumpIfTrueOrPop(u8),
    JumpAbsolute(u8),
    PopJumpIfFalse(u8),
    PopJumpIfTrue(u8),
    LoadGlobal(u8),
    IsOp(u8),
    ContainsOp(u8),
    Reraise(u8),
    JumpIfNotExcMatch(u8),
    SetupFinally(u8),
    LoadFast(u8),
    StoreFast(u8),
    DeleteFast(u8),
    GenStart(u8),
    RaiseVarargs(u8),
    CallFunction(u8),
    MakeFunction(u8),
    BuildSlice(u8),
    LoadClosure(u8),
    LoadDeref(u8),
    StoreDeref(u8),
    DeleteDeref(u8),
    CallFunctionKw(u8),
    CallFunctionEx(u8),
    SetupWith(u8),
    ExtendedArg(u16), // TODO: Change to comply with Include/cpython/code.h:27
    ListAppend(u8),
    SetAdd(u8),
    MapAdd(u8),
    LoadClassderef(u8),
    MatchClass(u8),
    SetupAsyncWith(u8),
    FormatValue(u8),
    BuildConstKeyMap(u8),
    BuildString(u8),
    LoadMethod(u8),
    CallMethod(u8),
    ListExtend(u8),
    SetUpdate(u8),
    DictMerge(u8),
    DictUpdate(u8),
}

impl Operation {
    pub fn from_byte(byte: &u8, reader: &mut Reader) -> Option<Self> {
        let next_byte = reader.read_byte();
        match byte {
            1 => Some(Operation::PopTop(next_byte)),
            2 => Some(Operation::RotTwo(next_byte)),
            3 => Some(Operation::RotThree(next_byte)),
            4 => Some(Operation::DupTop(next_byte)),
            5 => Some(Operation::DupTopTwo(next_byte)),
            6 => Some(Operation::RotFour(next_byte)),
            9 => Some(Operation::Nop(next_byte)),
            10 => Some(Operation::UnaryPositive(next_byte)),
            11 => Some(Operation::UnaryNegative(next_byte)),
            12 => Some(Operation::UnaryNot(next_byte)),
            15 => Some(Operation::UnaryInvert(next_byte)),
            16 => Some(Operation::BinaryMatrixMultiply(next_byte)),
            17 => Some(Operation::InplaceMatrixMultiply(next_byte)),
            19 => Some(Operation::BinaryPower(next_byte)),
            20 => Some(Operation::BinaryMultiply(next_byte)),
            22 => Some(Operation::BinaryModulo(next_byte)),
            23 => Some(Operation::BinaryAdd(next_byte)),
            24 => Some(Operation::BinarySubtract(next_byte)),
            25 => Some(Operation::BinarySubscr(next_byte)),
            26 => Some(Operation::BinaryFloorDivide(next_byte)),
            27 => Some(Operation::BinaryTrueDivide(next_byte)),
            28 => Some(Operation::InplaceFloorDivide(next_byte)),
            29 => Some(Operation::InplaceTrueDivide(next_byte)),
            30 => Some(Operation::GetLen(next_byte)),
            31 => Some(Operation::MatchMapping(next_byte)),
            32 => Some(Operation::MatchSequence(next_byte)),
            33 => Some(Operation::MatchKeys(next_byte)),
            34 => Some(Operation::CopyDictWithoutKeys(next_byte)),
            49 => Some(Operation::WithExceptStart(next_byte)),
            50 => Some(Operation::GetAiter(next_byte)),
            51 => Some(Operation::GetAnext(next_byte)),
            52 => Some(Operation::BeforeAsyncWith(next_byte)),
            54 => Some(Operation::EndAsyncFor(next_byte)),
            55 => Some(Operation::InplaceAdd(next_byte)),
            56 => Some(Operation::InplaceSubtract(next_byte)),
            57 => Some(Operation::InplaceMultiply(next_byte)),
            59 => Some(Operation::InplaceModulo(next_byte)),
            60 => Some(Operation::StoreSubscr(next_byte)),
            61 => Some(Operation::DeleteSubscr(next_byte)),
            62 => Some(Operation::BinaryLshift(next_byte)),
            63 => Some(Operation::BinaryRshift(next_byte)),
            64 => Some(Operation::BinaryAnd(next_byte)),
            65 => Some(Operation::BinaryXor(next_byte)),
            66 => Some(Operation::BinaryOr(next_byte)),
            67 => Some(Operation::InplacePower(next_byte)),
            68 => Some(Operation::GetIter(next_byte)),
            69 => Some(Operation::GetYieldFromIter(next_byte)),
            70 => Some(Operation::PrintExpr(next_byte)),
            71 => Some(Operation::LoadBuildClass(next_byte)),
            72 => Some(Operation::YieldFrom(next_byte)),
            73 => Some(Operation::GetAwaitable(next_byte)),
            74 => Some(Operation::LoadAssertionError(next_byte)),
            75 => Some(Operation::InplaceLshift(next_byte)),
            76 => Some(Operation::InplaceRshift(next_byte)),
            77 => Some(Operation::InplaceAnd(next_byte)),
            78 => Some(Operation::InplaceXor(next_byte)),
            79 => Some(Operation::InplaceOr(next_byte)),
            82 => Some(Operation::ListToTuple(next_byte)),
            83 => Some(Operation::ReturnValue(next_byte)),
            84 => Some(Operation::ImportStar(next_byte)),
            85 => Some(Operation::SetupAnnotations(next_byte)),
            86 => Some(Operation::YieldValue(next_byte)),
            87 => Some(Operation::PopBlock(next_byte)),
            89 => Some(Operation::PopExcept(next_byte)),
            90 => Some(Operation::StoreName(next_byte)),
            91 => Some(Operation::DeleteName(next_byte)),
            92 => Some(Operation::UnpackSequence(next_byte)),
            93 => Some(Operation::ForIter(next_byte)),
            94 => Some(Operation::UnpackEx(next_byte)),
            95 => Some(Operation::StoreAttr(next_byte)),
            96 => Some(Operation::DeleteAttr(next_byte)),
            97 => Some(Operation::StoreGlobal(next_byte)),
            98 => Some(Operation::DeleteGlobal(next_byte)),
            99 => Some(Operation::RotN(next_byte)),
            100 => Some(Operation::LoadConst(next_byte)),
            101 => Some(Operation::LoadName(next_byte)),
            102 => Some(Operation::BuildTuple(next_byte)),
            103 => Some(Operation::BuildList(next_byte)),
            104 => Some(Operation::BuildSet(next_byte)),
            105 => Some(Operation::BuildMap(next_byte)),
            106 => Some(Operation::LoadAttr(next_byte)),
            107 => Some(Operation::CompareOp(next_byte)),
            108 => Some(Operation::ImportName(next_byte)),
            109 => Some(Operation::ImportFrom(next_byte)),
            110 => Some(Operation::JumpForward(next_byte)),
            111 => Some(Operation::JumpIfFalseOrPop(next_byte)),
            112 => Some(Operation::JumpIfTrueOrPop(next_byte)),
            113 => Some(Operation::JumpAbsolute(next_byte)),
            114 => Some(Operation::PopJumpIfFalse(next_byte)),
            115 => Some(Operation::PopJumpIfTrue(next_byte)),
            116 => Some(Operation::LoadGlobal(next_byte)),
            117 => Some(Operation::IsOp(next_byte)),
            118 => Some(Operation::ContainsOp(next_byte)),
            119 => Some(Operation::Reraise(next_byte)),
            121 => Some(Operation::JumpIfNotExcMatch(next_byte)),
            122 => Some(Operation::SetupFinally(next_byte)),
            124 => Some(Operation::LoadFast(next_byte)),
            125 => Some(Operation::StoreFast(next_byte)),
            126 => Some(Operation::DeleteFast(next_byte)),
            129 => Some(Operation::GenStart(next_byte)),
            130 => Some(Operation::RaiseVarargs(next_byte)),
            131 => Some(Operation::CallFunction(next_byte)),
            132 => Some(Operation::MakeFunction(next_byte)),
            133 => Some(Operation::BuildSlice(next_byte)),
            135 => Some(Operation::LoadClosure(next_byte)),
            136 => Some(Operation::LoadDeref(next_byte)),
            137 => Some(Operation::StoreDeref(next_byte)),
            138 => Some(Operation::DeleteDeref(next_byte)),
            141 => Some(Operation::CallFunctionKw(next_byte)),
            142 => Some(Operation::CallFunctionEx(next_byte)),
            143 => Some(Operation::SetupWith(next_byte)),
            144 => Some(Operation::ExtendedArg(u16::from_le_bytes([
                next_byte,
                reader.read_byte(),
            ]))), // TODO: Change to comply with Include/cpython/code.h:27
            145 => Some(Operation::ListAppend(next_byte)),
            146 => Some(Operation::SetAdd(next_byte)),
            147 => Some(Operation::MapAdd(next_byte)),
            148 => Some(Operation::LoadClassderef(next_byte)),
            152 => Some(Operation::MatchClass(next_byte)),
            154 => Some(Operation::SetupAsyncWith(next_byte)),
            155 => Some(Operation::FormatValue(next_byte)),
            156 => Some(Operation::BuildConstKeyMap(next_byte)),
            157 => Some(Operation::BuildString(next_byte)),
            160 => Some(Operation::LoadMethod(next_byte)),
            161 => Some(Operation::CallMethod(next_byte)),
            162 => Some(Operation::ListExtend(next_byte)),
            163 => Some(Operation::SetUpdate(next_byte)),
            164 => Some(Operation::DictMerge(next_byte)),
            165 => Some(Operation::DictUpdate(next_byte)),
            _ => None,
        }
    }
}
