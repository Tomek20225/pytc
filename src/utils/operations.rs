use super::pycachereader::PyCacheReader;
use std::str;

#[derive(Debug, Clone)]
pub enum Operation {
    // === OPERATIONS WITH NO ARGUMENTS (argument byte is ignored) ===
    StopCode,              // 0 - end of bytecode
    PopTop,
    RotTwo,
    RotThree,
    DupTop,
    DupTopTwo,
    RotFour,
    Nop,
    UnaryPositive,
    UnaryNegative,
    UnaryNot,
    UnaryInvert,
    BinaryMatrixMultiply,
    InplaceMatrixMultiply,
    BinaryPower,
    BinaryMultiply,
    BinaryModulo,
    BinaryAdd,           // 23 - addition operation
    BinarySubtract,      // 24 - subtraction operation
    BinarySubscr,
    BinaryFloorDivide,
    BinaryTrueDivide,
    InplaceFloorDivide,
    InplaceTrueDivide,
    GetLen,
    MatchMapping,
    MatchSequence,
    MatchKeys,
    CopyDictWithoutKeys,
    WithExceptStart,
    GetAiter,
    GetAnext,
    BeforeAsyncWith,
    EndAsyncFor,
    InplaceAdd,
    InplaceSubtract,
    InplaceMultiply,
    InplaceModulo,
    StoreSubscr,
    DeleteSubscr,
    BinaryLshift,
    BinaryRshift,
    BinaryAnd,
    BinaryXor,
    BinaryOr,
    InplacePower,
    GetIter,
    GetYieldFromIter,
    PrintExpr,
    LoadBuildClass,
    YieldFrom,
    GetAwaitable,
    LoadAssertionError,
    InplaceLshift,
    InplaceRshift,
    InplaceAnd,
    InplaceXor,
    InplaceOr,
    ListToTuple,
    ReturnValue,         // 83 - return from function
    ImportStar,
    SetupAnnotations,
    YieldValue,
    PopBlock,
    PopExcept,
    StoreName,
    DeleteName,
    UnpackSequence,
    ForIter,
    UnpackEx,
    StoreAttr,
    DeleteAttr,
    StoreGlobal,
    DeleteGlobal,
    RotN,
    LoadConst,
    LoadName,
    BuildTuple,
    BuildList,
    BuildSet,
    BuildMap,
    LoadAttr,
    CompareOp,
    ImportName,
    ImportFrom,
    JumpForward,
    JumpIfFalseOrPop,
    JumpIfTrueOrPop,
    JumpAbsolute,
    PopJumpIfFalse,
    PopJumpIfTrue,
    LoadGlobal,
    IsOp,
    ContainsOp,
    Reraise,
    JumpIfNotExcMatch,
    LoadFast,
    StoreFast,
    DeleteFast,
    GenStart,
    RaiseVarargs,
    CallFunction,
    MakeFunction,
    BuildSlice,
    LoadClosure,
    LoadDeref,
    StoreDeref,
    DeleteDeref,
    CallFunctionKw,
    CallFunctionEx,
    SetupWith,
    ListAppend,
    SetAdd,
    MapAdd,
    LoadClassderef,
    MatchClass,
    SetupAsyncWith,
    FormatValue,
    BuildConstKeyMap,
    BuildString,
    LoadMethod,
    CallMethod,
    ListExtend,
    SetUpdate,
    DictMerge,
    DictUpdate,

    // === OPERATIONS WITH 1-BYTE ARGUMENT ===
    // These take a single u8 argument (index, offset, etc.)
    PopTopArg(u8),
    RotTwoArg(u8),
    RotThreeArg(u8),
    DupTopArg(u8),
    DupTopTwoArg(u8),
    RotFourArg(u8),
    NopArg(u8),
    UnaryPositiveArg(u8),
    UnaryNegativeArg(u8),
    UnaryNotArg(u8),
    UnaryInvertArg(u8),
    BinaryMatrixMultiplyArg(u8),
    InplaceMatrixMultiplyArg(u8),
    BinaryPowerArg(u8),
    BinaryMultiplyArg(u8),
    BinaryModuloArg(u8),
    BinaryAddArg(u8),
    BinarySubtractArg(u8),
    BinarySubscrArg(u8),
    BinaryFloorDivideArg(u8),
    BinaryTrueDivideArg(u8),
    InplaceFloorDivideArg(u8),
    InplaceTrueDivideArg(u8),
    GetLenArg(u8),
    MatchMappingArg(u8),
    MatchSequenceArg(u8),
    MatchKeysArg(u8),
    CopyDictWithoutKeysArg(u8),
    WithExceptStartArg(u8),
    GetAiterArg(u8),
    GetAnextArg(u8),
    BeforeAsyncWithArg(u8),
    EndAsyncForArg(u8),
    InplaceAddArg(u8),
    InplaceSubtractArg(u8),
    InplaceMultiplyArg(u8),
    InplaceModuloArg(u8),
    StoreSubscrArg(u8),
    DeleteSubscrArg(u8),
    BinaryLshiftArg(u8),
    BinaryRshiftArg(u8),
    BinaryAndArg(u8),
    BinaryXorArg(u8),
    BinaryOrArg(u8),
    InplacePowerArg(u8),
    GetIterArg(u8),
    GetYieldFromIterArg(u8),
    PrintExprArg(u8),
    LoadBuildClassArg(u8),
    YieldFromArg(u8),
    GetAwaitableArg(u8),
    LoadAssertionErrorArg(u8),
    InplaceLshiftArg(u8),
    InplaceRshiftArg(u8),
    InplaceAndArg(u8),
    InplaceXorArg(u8),
    InplaceOrArg(u8),
    ListToTupleArg(u8),
    ReturnValueArg(u8),
    ImportStarArg(u8),
    SetupAnnotationsArg(u8),
    YieldValueArg(u8),
    PopBlockArg(u8),
    PopExceptArg(u8),
    StoreNameArg(u8),
    DeleteNameArg(u8),
    UnpackSequenceArg(u8),
    ForIterArg(u8),
    UnpackExArg(u8),
    StoreAttrArg(u8),
    DeleteAttrArg(u8),
    StoreGlobalArg(u8),
    DeleteGlobalArg(u8),
    RotNArg(u8),
    LoadConstArg(u8),
    LoadNameArg(u8),
    BuildTupleArg(u8),
    BuildListArg(u8),
    BuildSetArg(u8),
    BuildMapArg(u8),
    LoadAttrArg(u8),
    CompareOpArg(u8),
    ImportNameArg(u8),
    ImportFromArg(u8),
    JumpForwardArg(u8),
    JumpIfFalseOrPopArg(u8),
    JumpIfTrueOrPopArg(u8),
    JumpAbsoluteArg(u8),
    PopJumpIfFalseArg(u8),
    PopJumpIfTrueArg(u8),
    LoadGlobalArg(u8),
    IsOpArg(u8),
    ContainsOpArg(u8),
    ReraiseArg(u8),
    JumpIfNotExcMatchArg(u8),
    LoadFastArg(u8),
    StoreFastArg(u8),
    DeleteFastArg(u8),
    GenStartArg(u8),
    RaiseVarargsArg(u8),
    CallFunctionArg(u8),
    MakeFunctionArg(u8),
    BuildSliceArg(u8),
    LoadClosureArg(u8),
    LoadDerefArg(u8),
    StoreDerefArg(u8),
    DeleteDerefArg(u8),
    CallFunctionKwArg(u8),
    CallFunctionExArg(u8),
    SetupWithArg(u8),
    ListAppendArg(u8),
    SetAddArg(u8),
    MapAddArg(u8),
    LoadClassderefArg(u8),
    MatchClassArg(u8),
    SetupAsyncWithArg(u8),
    FormatValueArg(u8),
    BuildConstKeyMapArg(u8),
    BuildStringArg(u8),
    LoadMethodArg(u8),
    CallMethodArg(u8),
    ListExtendArg(u8),
    SetUpdateArg(u8),
    DictMergeArg(u8),
    DictUpdateArg(u8),

    // === OPERATIONS WITH 2-BYTE ARGUMENT ===
    ExtendedArg(u16), // 2 bytes for extended argument

    // === OPERATIONS WITH 4-BYTE ARGUMENT ===
    SetupFinally(u32), // 4 bytes for offset in bytes
}

impl Operation {
    pub fn from_byte(byte: &u8, reader: &mut PyCacheReader) -> Option<Self> {
        match byte {
            // === OPERATIONS WITH NO ARGUMENTS ===
            0 => Some(Operation::StopCode),
            23 => Some(Operation::BinaryAdd),
            24 => Some(Operation::BinarySubtract),
            83 => Some(Operation::ReturnValue),
            
            // === OPERATIONS WITH 1-BYTE ARGUMENT ===
            1 => Some(Operation::PopTopArg(reader.read_byte())),
            2 => Some(Operation::RotTwoArg(reader.read_byte())),
            3 => Some(Operation::RotThreeArg(reader.read_byte())),
            4 => Some(Operation::DupTopArg(reader.read_byte())),
            5 => Some(Operation::DupTopTwoArg(reader.read_byte())),
            6 => Some(Operation::RotFourArg(reader.read_byte())),
            9 => Some(Operation::NopArg(reader.read_byte())),
            10 => Some(Operation::UnaryPositiveArg(reader.read_byte())),
            11 => Some(Operation::UnaryNegativeArg(reader.read_byte())),
            12 => Some(Operation::UnaryNotArg(reader.read_byte())),
            15 => Some(Operation::UnaryInvertArg(reader.read_byte())),
            16 => Some(Operation::BinaryMatrixMultiplyArg(reader.read_byte())),
            17 => Some(Operation::InplaceMatrixMultiplyArg(reader.read_byte())),
            19 => Some(Operation::BinaryPowerArg(reader.read_byte())),
            20 => Some(Operation::BinaryMultiplyArg(reader.read_byte())),
            22 => Some(Operation::BinaryModuloArg(reader.read_byte())),
            25 => Some(Operation::BinarySubscrArg(reader.read_byte())),
            26 => Some(Operation::BinaryFloorDivideArg(reader.read_byte())),
            27 => Some(Operation::BinaryTrueDivideArg(reader.read_byte())),
            28 => Some(Operation::InplaceFloorDivideArg(reader.read_byte())),
            29 => Some(Operation::InplaceTrueDivideArg(reader.read_byte())),
            30 => Some(Operation::GetLenArg(reader.read_byte())),
            31 => Some(Operation::MatchMappingArg(reader.read_byte())),
            32 => Some(Operation::MatchSequenceArg(reader.read_byte())),
            33 => Some(Operation::MatchKeysArg(reader.read_byte())),
            34 => Some(Operation::CopyDictWithoutKeysArg(reader.read_byte())),
            49 => Some(Operation::WithExceptStartArg(reader.read_byte())),
            50 => Some(Operation::GetAiterArg(reader.read_byte())),
            51 => Some(Operation::GetAnextArg(reader.read_byte())),
            52 => Some(Operation::BeforeAsyncWithArg(reader.read_byte())),
            54 => Some(Operation::EndAsyncForArg(reader.read_byte())),
            55 => Some(Operation::InplaceAddArg(reader.read_byte())),
            56 => Some(Operation::InplaceSubtractArg(reader.read_byte())),
            57 => Some(Operation::InplaceMultiplyArg(reader.read_byte())),
            59 => Some(Operation::InplaceModuloArg(reader.read_byte())),
            60 => Some(Operation::StoreSubscrArg(reader.read_byte())),
            61 => Some(Operation::DeleteSubscrArg(reader.read_byte())),
            62 => Some(Operation::BinaryLshiftArg(reader.read_byte())),
            63 => Some(Operation::BinaryRshiftArg(reader.read_byte())),
            64 => Some(Operation::BinaryAndArg(reader.read_byte())),
            65 => Some(Operation::BinaryXorArg(reader.read_byte())),
            66 => Some(Operation::BinaryOrArg(reader.read_byte())),
            67 => Some(Operation::InplacePowerArg(reader.read_byte())),
            68 => Some(Operation::GetIterArg(reader.read_byte())),
            69 => Some(Operation::GetYieldFromIterArg(reader.read_byte())),
            70 => Some(Operation::PrintExprArg(reader.read_byte())),
            71 => Some(Operation::LoadBuildClassArg(reader.read_byte())),
            72 => Some(Operation::YieldFromArg(reader.read_byte())),
            73 => Some(Operation::GetAwaitableArg(reader.read_byte())),
            74 => Some(Operation::LoadAssertionErrorArg(reader.read_byte())),
            75 => Some(Operation::InplaceLshiftArg(reader.read_byte())),
            76 => Some(Operation::InplaceRshiftArg(reader.read_byte())),
            77 => Some(Operation::InplaceAndArg(reader.read_byte())),
            78 => Some(Operation::InplaceXorArg(reader.read_byte())),
            79 => Some(Operation::InplaceOrArg(reader.read_byte())),
            82 => Some(Operation::ListToTupleArg(reader.read_byte())),
            84 => Some(Operation::ImportStarArg(reader.read_byte())),
            85 => Some(Operation::SetupAnnotationsArg(reader.read_byte())),
            86 => Some(Operation::YieldValueArg(reader.read_byte())),
            87 => Some(Operation::PopBlockArg(reader.read_byte())),
            89 => Some(Operation::PopExceptArg(reader.read_byte())),
            90 => Some(Operation::StoreNameArg(reader.read_byte())),
            91 => Some(Operation::DeleteNameArg(reader.read_byte())),
            92 => Some(Operation::UnpackSequenceArg(reader.read_byte())),
            93 => Some(Operation::ForIterArg(reader.read_byte())),
            94 => Some(Operation::UnpackExArg(reader.read_byte())),
            95 => Some(Operation::StoreAttrArg(reader.read_byte())),
            96 => Some(Operation::DeleteAttrArg(reader.read_byte())),
            97 => Some(Operation::StoreGlobalArg(reader.read_byte())),
            98 => Some(Operation::DeleteGlobalArg(reader.read_byte())),
            99 => Some(Operation::RotNArg(reader.read_byte())),
            100 => Some(Operation::LoadConstArg(reader.read_byte())),
            101 => Some(Operation::LoadNameArg(reader.read_byte())),
            102 => Some(Operation::BuildTupleArg(reader.read_byte())),
            103 => Some(Operation::BuildListArg(reader.read_byte())),
            104 => Some(Operation::BuildSetArg(reader.read_byte())),
            105 => Some(Operation::BuildMapArg(reader.read_byte())),
            106 => Some(Operation::LoadAttrArg(reader.read_byte())),
            107 => Some(Operation::CompareOpArg(reader.read_byte())),
            108 => Some(Operation::ImportNameArg(reader.read_byte())),
            109 => Some(Operation::ImportFromArg(reader.read_byte())),
            110 => Some(Operation::JumpForwardArg(reader.read_byte())),
            111 => Some(Operation::JumpIfFalseOrPopArg(reader.read_byte())),
            112 => Some(Operation::JumpIfTrueOrPopArg(reader.read_byte())),
            113 => Some(Operation::JumpAbsoluteArg(reader.read_byte())),
            114 => Some(Operation::PopJumpIfFalseArg(reader.read_byte())),
            115 => Some(Operation::PopJumpIfTrueArg(reader.read_byte())),
            116 => Some(Operation::LoadGlobalArg(reader.read_byte())),
            117 => Some(Operation::IsOpArg(reader.read_byte())),
            118 => Some(Operation::ContainsOpArg(reader.read_byte())),
            119 => Some(Operation::ReraiseArg(reader.read_byte())),
            121 => Some(Operation::JumpIfNotExcMatchArg(reader.read_byte())),
            124 => Some(Operation::LoadFastArg(reader.read_byte())),
            125 => Some(Operation::StoreFastArg(reader.read_byte())),
            126 => Some(Operation::DeleteFastArg(reader.read_byte())),
            129 => Some(Operation::GenStartArg(reader.read_byte())),
            130 => Some(Operation::RaiseVarargsArg(reader.read_byte())),
            131 => Some(Operation::CallFunctionArg(reader.read_byte())),
            132 => Some(Operation::MakeFunctionArg(reader.read_byte())),
            133 => Some(Operation::BuildSliceArg(reader.read_byte())),
            135 => Some(Operation::LoadClosureArg(reader.read_byte())),
            136 => Some(Operation::LoadDerefArg(reader.read_byte())),
            137 => Some(Operation::StoreDerefArg(reader.read_byte())),
            138 => Some(Operation::DeleteDerefArg(reader.read_byte())),
            141 => Some(Operation::CallFunctionKwArg(reader.read_byte())),
            142 => Some(Operation::CallFunctionExArg(reader.read_byte())),
            143 => Some(Operation::SetupWithArg(reader.read_byte())),
            145 => Some(Operation::ListAppendArg(reader.read_byte())),
            146 => Some(Operation::SetAddArg(reader.read_byte())),
            147 => Some(Operation::MapAddArg(reader.read_byte())),
            148 => Some(Operation::LoadClassderefArg(reader.read_byte())),
            152 => Some(Operation::MatchClassArg(reader.read_byte())),
            154 => Some(Operation::SetupAsyncWithArg(reader.read_byte())),
            155 => Some(Operation::FormatValueArg(reader.read_byte())),
            156 => Some(Operation::BuildConstKeyMapArg(reader.read_byte())),
            157 => Some(Operation::BuildStringArg(reader.read_byte())),
            160 => Some(Operation::LoadMethodArg(reader.read_byte())),
            161 => Some(Operation::CallMethodArg(reader.read_byte())),
            162 => Some(Operation::ListExtendArg(reader.read_byte())),
            163 => Some(Operation::SetUpdateArg(reader.read_byte())),
            164 => Some(Operation::DictMergeArg(reader.read_byte())),
            165 => Some(Operation::DictUpdateArg(reader.read_byte())),

            // === OPERATIONS WITH 2-BYTE ARGUMENT ===
            144 => Some(Operation::ExtendedArg(u16::from_le_bytes([
                reader.read_byte(),
                reader.read_byte(),
            ]))),

            // === OPERATIONS WITH 4-BYTE ARGUMENT ===
            122 => Some(Operation::SetupFinally(u32::from_le_bytes([
                reader.read_byte(),
                reader.read_byte(),
                reader.read_byte(),
                0,
            ]))),

            _ => {
                let bytes = vec![*byte];
                todo!("type {} (value {})", str::from_utf8(&bytes).unwrap(), byte)
            }
        }
    }
}

impl Default for Operation {
    fn default() -> Self {
        Operation::ReturnValue
    }
}
