pub enum Instruction {
    Cache,
    BeforeAsyncWith,
    BeforeWith,
    BinaryOpInplaceAddUnicode,
    BinarySlice,
    BinarySubscr,
    CheckEgMatch,
    CheckExcMatch,
    CleanupThrow,
    DeleteSubscr,
    EndAsyncFor,
    EndFor,
    EndSend,
    ExitInitCheck,
    FormatSimple,
    FormatWithSpec,
    GetAiter,
    Reserved,
    GetAnext,
    GetIter,
    GetLen,
    GetYieldFromIter,
    InterpreterExit,
    LoadAssertionError,
    LoadBuildClass,
    LoadLocals,
    MakeFunction,
    MatchKeys,
    MatchMapping,
    MatchSequence,
    Nop,
    PopExcept,
    PopTop,
    PushExcInfo,
    PushNull,
    ReturnGenerator,
    ReturnValue,
    SetupAnnotations,
    StoreSlice,
    StoreSubscr,
    ToBool,
    UnaryInvert,
    UnaryNegative,
    UnaryNot,
    WithExceptStart,
    BinaryOp,
    BuildConstKeyMap,
    BuildList,
    BuildMap,
    BuildSet,
    BuildSlice,
    BuildString,
    BuildTuple,
    Call,
    CallFunctionEx,
    CallIntrinsic1,
    CallIntrinsic2,
    CallKw,
    CompareOp,
    ContainsOp,
    ConvertValue,
    Copy,
    CopyFreeVars,
    DeleteAttr,
    DeleteDeref,
    DeleteFast,
    DeleteGlobal,
    DeleteName,
    DictMerge,
    DictUpdate,
    EnterExecutor,
    ExtendedArg,
    ForIter,
    GetAwaitable,
    ImportFrom,
    ImportName,
    IsOp,
    JumpBackward,
    JumpBackwardNoInterrupt,
    JumpForward,
    ListAppend,
    ListExtend,
    LoadAttr,
    LoadConst,
    LoadDeref,
    LoadFast,
    LoadFastAndClear,
    LoadFastCheck,
    LoadFastLoadFast,
    LoadFromDictOrDeref,
    LoadFromDictOrGlobals,
    LoadGlobal,
    LoadName,
    LoadSuperAttr,
    MakeCell,
    MapAdd,
    MatchClass,
    PopJumpIfFalse,
    PopJumpIfNone,
    PopJumpIfNotNone,
    PopJumpIfTrue,
    RaiseVarargs,
    Reraise,
    ReturnConst,
    Send,
    SetAdd,
    SetFunctionAttribute,
    SetUpdate,
    StoreAttr,
    StoreDeref,
    StoreFast,
    StoreFastLoadFast,
    StoreFastStoreFast,
    StoreGlobal,
    StoreName,
    Swap,
    UnpackEx,
    UnpackSequence,
    YieldValue,
    Resume,
    BinaryOpAddFloat,
    BinaryOpAddInt,
    BinaryOpAddUnicode,
    BinaryOpMultiplyFloat,
    BinaryOpMultiplyInt,
    BinaryOpSubtractFloat,
    BinaryOpSubtractInt,
    BinarySubscrDict,
    BinarySubscrGetitem,
    BinarySubscrListInt,
    BinarySubscrStrInt,
    BinarySubscrTupleInt,
    CallAllocAndEnterInit,
    CallBoundMethodExactArgs,
    CallBuiltinClass,
    CallBuiltinFast,
    CallBuiltinFastWithKeywords,
    CallBuiltinO,
    CallIsinstance,
    CallLen,
    CallListAppend,
    CallMethodDescriptorFast,
    CallMethodDescriptorFastWithKeywords,
    CallMethodDescriptorNoargs,
    CallMethodDescriptorO,
    CallPyExactArgs,
    CallPyWithDefaults,
    CallStr1,
    CallTuple1,
    CallType1,
    CompareOpFloat,
    CompareOpInt,
    CompareOpStr,
    ForIterGen,
    ForIterList,
    ForIterRange,
    ForIterTuple,
    LoadAttrClass,
    LoadAttrGetattributeOverridden,
    LoadAttrInstanceValue,
    LoadAttrMethodLazyDict,
    LoadAttrMethodNoDict,
    LoadAttrMethodWithValues,
    LoadAttrModule,
    LoadAttrNondescriptorNoDict,
    LoadAttrNondescriptorWithValues,
    LoadAttrProperty,
    LoadAttrSlot,
    LoadAttrWithHint,
    LoadGlobalBuiltin,
    LoadGlobalModule,
    LoadSuperAttrAttr,
    LoadSuperAttrMethod,
    ResumeCheck,
    SendGen,
    StoreAttrInstanceValue,
    StoreAttrSlot,
    StoreAttrWithHint,
    StoreSubscrDict,
    StoreSubscrListInt,
    ToBoolAlwaysTrue,
    ToBoolBool,
    ToBoolInt,
    ToBoolList,
    ToBoolNone,
    ToBoolStr,
    UnpackSequenceList,
    UnpackSequenceTuple,
    UnpackSequenceTwoTuple,
    InstrumentedResume,
    InstrumentedEndFor,
    InstrumentedEndSend,
    InstrumentedReturnValue,
    InstrumentedReturnConst,
    InstrumentedYieldValue,
    InstrumentedLoadSuperAttr,
    InstrumentedForIter,
    InstrumentedCall,
    InstrumentedCallKw,
    InstrumentedCallFunctionEx,
    InstrumentedInstruction,
    InstrumentedJumpForward,
    InstrumentedJumpBackward,
    InstrumentedPopJumpIfTrue,
    InstrumentedPopJumpIfFalse,
    InstrumentedPopJumpIfNone,
    InstrumentedPopJumpIfNotNone,
    InstrumentedLine,
    Jump,
    JumpNoInterrupt,
    LoadClosure,
    LoadMethod,
    LoadSuperMethod,
    LoadZeroSuperAttr,
    LoadZeroSuperMethod,
    PopBlock,
    SetupCleanup,
    SetupFinally,
    SetupWith,
    StoreFastMaybeNull,
    //
    HaveArgument, // 44
    MinInstrumentedOpcode, // 236
}

impl Instruction {
    pub fn from_byte(byte: &u16) -> Option<Self> {
        match byte {
            0 => Some(Instruction::Cache),
            1 => Some(Instruction::BeforeAsyncWith),
            2 => Some(Instruction::BeforeWith),
            3 => Some(Instruction::BinaryOpInplaceAddUnicode),
            4 => Some(Instruction::BinarySlice),
            5 => Some(Instruction::BinarySubscr),
            6 => Some(Instruction::CheckEgMatch),
            7 => Some(Instruction::CheckExcMatch),
            8 => Some(Instruction::CleanupThrow),
            9 => Some(Instruction::DeleteSubscr),
            10 => Some(Instruction::EndAsyncFor),
            11 => Some(Instruction::EndFor),
            12 => Some(Instruction::EndSend),
            13 => Some(Instruction::ExitInitCheck),
            14 => Some(Instruction::FormatSimple),
            15 => Some(Instruction::FormatWithSpec),
            16 => Some(Instruction::GetAiter),
            17 => Some(Instruction::Reserved),
            18 => Some(Instruction::GetAnext),
            19 => Some(Instruction::GetIter),
            20 => Some(Instruction::GetLen),
            21 => Some(Instruction::GetYieldFromIter),
            22 => Some(Instruction::InterpreterExit),
            23 => Some(Instruction::LoadAssertionError),
            24 => Some(Instruction::LoadBuildClass),
            25 => Some(Instruction::LoadLocals),
            26 => Some(Instruction::MakeFunction),
            27 => Some(Instruction::MatchKeys),
            28 => Some(Instruction::MatchMapping),
            29 => Some(Instruction::MatchSequence),
            30 => Some(Instruction::Nop),
            31 => Some(Instruction::PopExcept),
            32 => Some(Instruction::PopTop),
            33 => Some(Instruction::PushExcInfo),
            34 => Some(Instruction::PushNull),
            35 => Some(Instruction::ReturnGenerator),
            36 => Some(Instruction::ReturnValue),
            37 => Some(Instruction::SetupAnnotations),
            38 => Some(Instruction::StoreSlice),
            39 => Some(Instruction::StoreSubscr),
            40 => Some(Instruction::ToBool),
            41 => Some(Instruction::UnaryInvert),
            42 => Some(Instruction::UnaryNegative),
            43 => Some(Instruction::UnaryNot),
            44 => Some(Instruction::WithExceptStart),
            45 => Some(Instruction::BinaryOp),
            46 => Some(Instruction::BuildConstKeyMap),
            47 => Some(Instruction::BuildList),
            48 => Some(Instruction::BuildMap),
            49 => Some(Instruction::BuildSet),
            50 => Some(Instruction::BuildSlice),
            51 => Some(Instruction::BuildString),
            52 => Some(Instruction::BuildTuple),
            53 => Some(Instruction::Call),
            54 => Some(Instruction::CallFunctionEx),
            55 => Some(Instruction::CallIntrinsic1),
            56 => Some(Instruction::CallIntrinsic2),
            57 => Some(Instruction::CallKw),
            58 => Some(Instruction::CompareOp),
            59 => Some(Instruction::ContainsOp),
            60 => Some(Instruction::ConvertValue),
            61 => Some(Instruction::Copy),
            62 => Some(Instruction::CopyFreeVars),
            63 => Some(Instruction::DeleteAttr),
            64 => Some(Instruction::DeleteDeref),
            65 => Some(Instruction::DeleteFast),
            66 => Some(Instruction::DeleteGlobal),
            67 => Some(Instruction::DeleteName),
            68 => Some(Instruction::DictMerge),
            69 => Some(Instruction::DictUpdate),
            70 => Some(Instruction::EnterExecutor),
            71 => Some(Instruction::ExtendedArg),
            72 => Some(Instruction::ForIter),
            73 => Some(Instruction::GetAwaitable),
            74 => Some(Instruction::ImportFrom),
            75 => Some(Instruction::ImportName),
            76 => Some(Instruction::IsOp),
            77 => Some(Instruction::JumpBackward),
            78 => Some(Instruction::JumpBackwardNoInterrupt),
            79 => Some(Instruction::JumpForward),
            80 => Some(Instruction::ListAppend),
            81 => Some(Instruction::ListExtend),
            82 => Some(Instruction::LoadAttr),
            83 => Some(Instruction::LoadConst),
            84 => Some(Instruction::LoadDeref),
            85 => Some(Instruction::LoadFast),
            86 => Some(Instruction::LoadFastAndClear),
            87 => Some(Instruction::LoadFastCheck),
            88 => Some(Instruction::LoadFastLoadFast),
            89 => Some(Instruction::LoadFromDictOrDeref),
            90 => Some(Instruction::LoadFromDictOrGlobals),
            91 => Some(Instruction::LoadGlobal),
            92 => Some(Instruction::LoadName),
            93 => Some(Instruction::LoadSuperAttr),
            94 => Some(Instruction::MakeCell),
            95 => Some(Instruction::MapAdd),
            96 => Some(Instruction::MatchClass),
            97 => Some(Instruction::PopJumpIfFalse),
            98 => Some(Instruction::PopJumpIfNone),
            99 => Some(Instruction::PopJumpIfNotNone),
            100 => Some(Instruction::PopJumpIfTrue),
            101 => Some(Instruction::RaiseVarargs),
            102 => Some(Instruction::Reraise),
            103 => Some(Instruction::ReturnConst),
            104 => Some(Instruction::Send),
            105 => Some(Instruction::SetAdd),
            106 => Some(Instruction::SetFunctionAttribute),
            107 => Some(Instruction::SetUpdate),
            108 => Some(Instruction::StoreAttr),
            109 => Some(Instruction::StoreDeref),
            110 => Some(Instruction::StoreFast),
            111 => Some(Instruction::StoreFastLoadFast),
            112 => Some(Instruction::StoreFastStoreFast),
            113 => Some(Instruction::StoreGlobal),
            114 => Some(Instruction::StoreName),
            115 => Some(Instruction::Swap),
            116 => Some(Instruction::UnpackEx),
            117 => Some(Instruction::UnpackSequence),
            118 => Some(Instruction::YieldValue),
            149 => Some(Instruction::Resume),
            150 => Some(Instruction::BinaryOpAddFloat),
            151 => Some(Instruction::BinaryOpAddInt),
            152 => Some(Instruction::BinaryOpAddUnicode),
            153 => Some(Instruction::BinaryOpMultiplyFloat),
            154 => Some(Instruction::BinaryOpMultiplyInt),
            155 => Some(Instruction::BinaryOpSubtractFloat),
            156 => Some(Instruction::BinaryOpSubtractInt),
            157 => Some(Instruction::BinarySubscrDict),
            158 => Some(Instruction::BinarySubscrGetitem),
            159 => Some(Instruction::BinarySubscrListInt),
            160 => Some(Instruction::BinarySubscrStrInt),
            161 => Some(Instruction::BinarySubscrTupleInt),
            162 => Some(Instruction::CallAllocAndEnterInit),
            163 => Some(Instruction::CallBoundMethodExactArgs),
            164 => Some(Instruction::CallBuiltinClass),
            165 => Some(Instruction::CallBuiltinFast),
            166 => Some(Instruction::CallBuiltinFastWithKeywords),
            167 => Some(Instruction::CallBuiltinO),
            168 => Some(Instruction::CallIsinstance),
            169 => Some(Instruction::CallLen),
            170 => Some(Instruction::CallListAppend),
            171 => Some(Instruction::CallMethodDescriptorFast),
            172 => Some(Instruction::CallMethodDescriptorFastWithKeywords),
            173 => Some(Instruction::CallMethodDescriptorNoargs),
            174 => Some(Instruction::CallMethodDescriptorO),
            175 => Some(Instruction::CallPyExactArgs),
            176 => Some(Instruction::CallPyWithDefaults),
            177 => Some(Instruction::CallStr1),
            178 => Some(Instruction::CallTuple1),
            179 => Some(Instruction::CallType1),
            180 => Some(Instruction::CompareOpFloat),
            181 => Some(Instruction::CompareOpInt),
            182 => Some(Instruction::CompareOpStr),
            183 => Some(Instruction::ForIterGen),
            184 => Some(Instruction::ForIterList),
            185 => Some(Instruction::ForIterRange),
            186 => Some(Instruction::ForIterTuple),
            187 => Some(Instruction::LoadAttrClass),
            188 => Some(Instruction::LoadAttrGetattributeOverridden),
            189 => Some(Instruction::LoadAttrInstanceValue),
            190 => Some(Instruction::LoadAttrMethodLazyDict),
            191 => Some(Instruction::LoadAttrMethodNoDict),
            192 => Some(Instruction::LoadAttrMethodWithValues),
            193 => Some(Instruction::LoadAttrModule),
            194 => Some(Instruction::LoadAttrNondescriptorNoDict),
            195 => Some(Instruction::LoadAttrNondescriptorWithValues),
            196 => Some(Instruction::LoadAttrProperty),
            197 => Some(Instruction::LoadAttrSlot),
            198 => Some(Instruction::LoadAttrWithHint),
            199 => Some(Instruction::LoadGlobalBuiltin),
            200 => Some(Instruction::LoadGlobalModule),
            201 => Some(Instruction::LoadSuperAttrAttr),
            202 => Some(Instruction::LoadSuperAttrMethod),
            203 => Some(Instruction::ResumeCheck),
            204 => Some(Instruction::SendGen),
            205 => Some(Instruction::StoreAttrInstanceValue),
            206 => Some(Instruction::StoreAttrSlot),
            207 => Some(Instruction::StoreAttrWithHint),
            208 => Some(Instruction::StoreSubscrDict),
            209 => Some(Instruction::StoreSubscrListInt),
            210 => Some(Instruction::ToBoolAlwaysTrue),
            211 => Some(Instruction::ToBoolBool),
            212 => Some(Instruction::ToBoolInt),
            213 => Some(Instruction::ToBoolList),
            214 => Some(Instruction::ToBoolNone),
            215 => Some(Instruction::ToBoolStr),
            216 => Some(Instruction::UnpackSequenceList),
            217 => Some(Instruction::UnpackSequenceTuple),
            218 => Some(Instruction::UnpackSequenceTwoTuple),
            236 => Some(Instruction::InstrumentedResume),
            237 => Some(Instruction::InstrumentedEndFor),
            238 => Some(Instruction::InstrumentedEndSend),
            239 => Some(Instruction::InstrumentedReturnValue),
            240 => Some(Instruction::InstrumentedReturnConst),
            241 => Some(Instruction::InstrumentedYieldValue),
            242 => Some(Instruction::InstrumentedLoadSuperAttr),
            243 => Some(Instruction::InstrumentedForIter),
            244 => Some(Instruction::InstrumentedCall),
            245 => Some(Instruction::InstrumentedCallKw),
            246 => Some(Instruction::InstrumentedCallFunctionEx),
            247 => Some(Instruction::InstrumentedInstruction),
            248 => Some(Instruction::InstrumentedJumpForward),
            249 => Some(Instruction::InstrumentedJumpBackward),
            250 => Some(Instruction::InstrumentedPopJumpIfTrue),
            251 => Some(Instruction::InstrumentedPopJumpIfFalse),
            252 => Some(Instruction::InstrumentedPopJumpIfNone),
            253 => Some(Instruction::InstrumentedPopJumpIfNotNone),
            254 => Some(Instruction::InstrumentedLine),
            256 => Some(Instruction::Jump),
            257 => Some(Instruction::JumpNoInterrupt),
            258 => Some(Instruction::LoadClosure),
            259 => Some(Instruction::LoadMethod),
            260 => Some(Instruction::LoadSuperMethod),
            261 => Some(Instruction::LoadZeroSuperAttr),
            262 => Some(Instruction::LoadZeroSuperMethod),
            263 => Some(Instruction::PopBlock),
            264 => Some(Instruction::SetupCleanup),
            265 => Some(Instruction::SetupFinally),
            266 => Some(Instruction::SetupWith),
            267 => Some(Instruction::StoreFastMaybeNull),

            // 44 => Some(Instruction::HaveArgument),
            // 236 => Some(Instruction::MinInstrumentedOpcode),

            _ => None
        }
    }
}